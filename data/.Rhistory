targets <- sin( 2 * pi * inputs) + rnorm( nSamples, 0, 0.30 )
# true distribution
x = seq(0, 1, 0.01)
true <- sin( 2 * pi * x)
# =============================================================================
# plot dataset
qplot( inputs, targets )
x
t
targets
inputs
# =============================================================================
# Clear workspace
rm(list=ls())
set.seed(123)
# =============================================================================
setwd('/Users/aaron/playground/proj-ML-gallery/data/')
# =============================================================================
# libraries
library(ggplot2)
# =============================================================================
# sample from uniform distribution
# x ~ U(0,1)
nSamples <- 10
inputs <- runif( nSamples )
# =============================================================================
# Targets
# t = sin(2*pi*x) + noise
#targets <- sin( 2 * pi * inputs) + rnorm( nSamples, 0, 0.30 )
# t = w0 + w1*x
w0 = 2.71
w1 = 0.43
targets <- w0 + w1 * x
# =============================================================================
# Clear workspace
rm(list=ls())
set.seed(123)
# =============================================================================
setwd('/Users/aaron/playground/proj-ML-gallery/data/')
# =============================================================================
# libraries
library(ggplot2)
# =============================================================================
# sample from uniform distribution
# x ~ U(0,1)
nSamples <- 10
inputs <- runif( nSamples )
# =============================================================================
# Targets
# t = sin(2*pi*x) + noise
#targets <- sin( 2 * pi * inputs) + rnorm( nSamples, 0, 0.30 )
# t = w0 + w1*x
w0 = 2.71
w1 = 0.43
targets <- w0 + w1 * inputs
qplot( inputs, targets )
linReg <- lm(targets ~ inputs)
linReg
# =============================================================================
# Clear workspace
rm(list=ls())
set.seed(123)
# =============================================================================
setwd('/Users/aaron/playground/proj-ML-gallery/data/')
# =============================================================================
# libraries
library(ggplot2)
# =============================================================================
# sample from uniform distribution
# x ~ U(0,1)
nSamples <- 10
inputs <- runif( nSamples )
# =============================================================================
# Targets
# t = sin(2*pi*x) + noise
#targets <- sin( 2 * pi * inputs) + rnorm( nSamples, 0, 0.30 )
# t = w0 + w1*x
w0 = 2.71
w1 = 0.43
targets <- w0 + w1 * inputs + rnorm( nSamples, 0, 0.20 )
# =============================================================================
# plot dataset
qplot( inputs, targets )
# =============================================================================
# linear regression in R
linReg <- lm(targets ~ inputs)
linReg
summary(linReg)
# =============================================================================
# Clear workspace
rm(list=ls())
set.seed(123)
# =============================================================================
setwd('/Users/aaron/playground/proj-ML-gallery/data/')
# =============================================================================
# libraries
library(ggplot2)
# =============================================================================
# sample from uniform distribution
# x ~ U(0,1)
nSamples <- 10
inputs <- runif( nSamples )
# =============================================================================
# Targets
# t = sin(2*pi*x) + noise
#targets <- sin( 2 * pi * inputs) + rnorm( nSamples, 0, 0.30 )
# t = w0 + w1*x
w0 = 2.71
w1 = 0.43
targets <- w0 + w1 * inputs + rnorm( nSamples, 0, 0.02 )
# =============================================================================
# plot dataset
qplot( inputs, targets )
# =============================================================================
# linear regression in R
linReg <- lm(targets ~ inputs)
linReg
# =============================================================================
# Clear workspace
rm(list=ls())
set.seed(123)
# =============================================================================
setwd('/Users/aaron/playground/proj-ML-gallery/data/')
# =============================================================================
# libraries
library(ggplot2)
# =============================================================================
# sample from uniform distribution
# x ~ U(0,1)
nSamples <- 10
inputs <- runif( nSamples )
# =============================================================================
# Targets
# t = sin(2*pi*x) + noise
#targets <- sin( 2 * pi * inputs) + rnorm( nSamples, 0, 0.30 )
# t = w0 + w1*x
w0 = 2.71
w1 = 0.43
targets <- w0 + w1 * inputs + rnorm( nSamples, 0, 0.02 )
# =============================================================================
# plot dataset
qplot( inputs, targets )
# =============================================================================
# linear regression in R
linReg <- lm(targets ~ inputs)
# =============================================================================
# learn these parameters manually
# 1. specify parametric functional form of the model
# 2. determine the values of the parameters using max lnL/error function
# =============================================================================
# 1. y(x,w) = w0 + w1*x
# 2. E(w) = 0.5 * sum_i (y_i - t_i)^2
leastSquaresError <- function( x, w, t){
for( i in 1:nSamples)
print( i );
}
leastSquaresError( inputs, weights, targets)
weights()
weights <- c( 0.2 , 3.9)
weights
weights[0]
weights[1]
leastSquaresError <- function( x, w, t){
error = 0.0
y <- w[0] + w[1]*inputs
print(y)
print(error)
#for( i in 1:nSamples){
#  error += ( )
#}
}
# random initialize the weights
weights <- c( 0.2 , 3.9)
leastSquaresError( inputs, weights, targets)
leastSquaresError <- function( x, w, t){
error = 0.0
print(error)
for( i in 1:nSamples){
y[i] <- w[0] + w[1]*inputs[i]
print(y[i])
#      error += ( )
}
}
# random initialize the weights
weights <- c( 0.2 , 3.9)
leastSquaresError( inputs, weights, targets)
leastSquaresError <- function( x, w, t){
error = 0.0
print(error)
for( i in 1:nSamples){
y <- w[0] + w[1]*inputs[i]
print(y)
#      error += ( )
}
}
# random initialize the weights
weights <- c( 0.2 , 3.9)
leastSquaresError( inputs, weights, targets)
leastSquaresError <- function( x, w, t){
error = 0.0
print(error)
for( i in 1:nSamples){
y <- w[0] + w[1]*x[i]
print(y)
#      error += ( )
}
}
# random initialize the weights
weights <- c( 0.2 , 3.9)
leastSquaresError( inputs, weights, targets)
# =============================================================================
# Clear workspace
rm(list=ls())
set.seed(123)
# =============================================================================
setwd('/Users/aaron/playground/proj-ML-gallery/data/')
# =============================================================================
# libraries
library(ggplot2)
# =============================================================================
# sample from uniform distribution
# x ~ U(0,1)
nSamples <- 10
inputs <- runif( nSamples )
# =============================================================================
# Targets
# t = sin(2*pi*x) + noise
#targets <- sin( 2 * pi * inputs) + rnorm( nSamples, 0, 0.30 )
# t = w0 + w1*x
w0 = 2.71
w1 = 0.43
targets <- w0 + w1 * inputs + rnorm( nSamples, 0, 0.02 )
# =============================================================================
# plot dataset
qplot( inputs, targets )
# =============================================================================
# linear regression in R
linReg <- lm(targets ~ inputs)
# =============================================================================
# learn these parameters manually
# 1. specify parametric functional form of the model
# 2. determine the values of the parameters using max lnL/error function
# =============================================================================
# 1. y(x,w) = w0 + w1*x
# 2. E(w) = 0.5 * sum_i (y_i - t_i)^2
leastSquaresError <- function( x, w, t){
error = 0.0
print(error)
for( i in 1:nSamples){
y <- w[0] + w[1]*x[i]
print(y)
#      error += ( )
}
}
# random initialize the weights
weights <- c( 0.2 , 3.9)
leastSquaresError( inputs, weights, targets)
# =============================================================================
# Clear workspace
rm(list=ls())
set.seed(123)
# =============================================================================
setwd('/Users/aaron/playground/proj-ML-gallery/data/')
# =============================================================================
# libraries
library(ggplot2)
# =============================================================================
# sample from uniform distribution
# x ~ U(0,1)
nSamples <- 10
inputs <- runif( nSamples )
# =============================================================================
# Targets
# t = sin(2*pi*x) + noise
#targets <- sin( 2 * pi * inputs) + rnorm( nSamples, 0, 0.30 )
# t = w0 + w1*x
w0 = 2.71
w1 = 0.43
targets <- w0 + w1 * inputs + rnorm( nSamples, 0, 0.02 )
# =============================================================================
# plot dataset
qplot( inputs, targets )
# =============================================================================
# linear regression in R
linReg <- lm(targets ~ inputs)
# =============================================================================
# learn these parameters manually
# 1. specify parametric functional form of the model
# 2. determine the values of the parameters using max lnL/error function
# =============================================================================
# 1. y(x,w) = w0 + w1*x
# 2. E(w) = 0.5 * sum_i (y_i - t_i)^2
leastSquaresError <- function( x , w, t){
print( x )
print( w )
print( t )
}
# random initialize the weights
weights <- c( 0.2 , 3.9)
leastSquaresError( inputs, weights, targets)
leastSquaresError <- function( x , w, t){
print( x )
print( w )
print( t )
print( nSamples )
}
# random initialize the weights
weights <- c( 0.2 , 3.9)
leastSquaresError( inputs, weights, targets)
leastSquaresError <- function( x , w, t){
for( i in 1:nSamples ){
y <- w[1] + w[2]
print(y)
}
}
# random initialize the weights
weights <- c( 0.2 , 3.9)
leastSquaresError( inputs, weights, targets)
leastSquaresError <- function( x , w, t){
for( i in 1:nSamples ){
y <- w[1] + w[2]*x[i]
print(y)
}
}
# random initialize the weights
weights <- c( 0.2 , 3.9)
leastSquaresError( inputs, weights, targets)
leastSquaresError <- function( x , w, t){
error = 0.0;
for( i in 1:nSamples ){
y <- w[1] + w[2]*x[i]
error <- ( y - t[i])^2
print( error )
}
}
# random initialize the weights
weights <- c( 0.2 , 3.9)
leastSquaresError( inputs, weights, targets)
leastSquaresError <- function( x , w, t){
error = 0.0;
for( i in 1:nSamples ){
y <- w[1] + w[2]*x[i]
error = error + ( y - t[i])^2
}
print( error )
#return( error )
}
# random initialize the weights
weights <- c( 0.2 , 3.9)
leastSquaresError( inputs, weights, targets)
leastSquaresError <- function( x , w, t){
error = 0.0;
for( i in 1:nSamples ){
y <- w[1] + w[2]*x[i]
error = error + ( y - t[i])^2
}
error = 0.5 * error
print( error )
#return( error )
}
# random initialize the weights
weights <- c( 0.2 , 3.9)
leastSquaresError( inputs, weights, targets)
# =============================================================================
# Clear workspace
rm(list=ls())
set.seed(123)
# =============================================================================
setwd('/Users/aaron/playground/proj-ML-gallery/data/')
# =============================================================================
# libraries
library(ggplot2)
# =============================================================================
# sample from uniform distribution
# x ~ U(0,1)
nSamples <- 10
inputs <- runif( nSamples )
# =============================================================================
# Targets
# t = sin(2*pi*x) + noise
#targets <- sin( 2 * pi * inputs) + rnorm( nSamples, 0, 0.30 )
# t = w0 + w1*x
w0 = 2.71
w1 = 0.43
targets <- w0 + w1 * inputs + rnorm( nSamples, 0, 0.02 )
# =============================================================================
# plot dataset
qplot( inputs, targets )
# =============================================================================
# linear regression in R
linReg <- lm(targets ~ inputs)
# =============================================================================
# learn these parameters manually
# 1. specify parametric functional form of the model
# 2. determine the values of the parameters using max lnL/error function
# =============================================================================
# 1. y(x,w) = w0 + w1*x
# 2. E(w) = 0.5 * sum_i (y_i - t_i)^2
leastSquaresError <- function( x , w, t){
error = 0.0;
for( i in 1:nSamples ){
y <- w[1] + w[2]*x[i]
error = error + ( y - t[i])^2
}
error = 0.5 * error
return( error )
}
# random initialize the weights
weights <- c( 0.2 , 3.9)
myError <- leastSquaresError( inputs, weights, targets)
print( myError )
# =============================================================================
# Clear workspace
rm(list=ls())
set.seed(123)
# =============================================================================
setwd('/Users/aaron/playground/proj-ML-gallery/data/')
# =============================================================================
# libraries
library(ggplot2)
# =============================================================================
# sample from uniform distribution
# x ~ U(0,1)
nSamples <- 10
inputs <- runif( nSamples )
# =============================================================================
# Targets
# t = sin(2*pi*x) + noise
#targets <- sin( 2 * pi * inputs) + rnorm( nSamples, 0, 0.30 )
# t = w0 + w1*x
w0 = 2.71
w1 = 0.43
targets <- w0 + w1 * inputs + rnorm( nSamples, 0, 0.02 )
# =============================================================================
# plot dataset
qplot( inputs, targets )
# =============================================================================
# linear regression in R
linReg <- lm(targets ~ inputs)
# =============================================================================
# learn these parameters manually
# 1. specify parametric functional form of the model
# 2. determine the values of the parameters using max lnL/error function
# =============================================================================
# 1. y(x,w) = w0 + w1*x
# 2. E(w) = 0.5 * sum_i (y_i - t_i)^2
leastSquaresError <- function( x , w, t){
error = 0.0;
for( i in 1:nSamples ){
y <- w[1] + w[2]*x[i]
error = error + ( y - t[i])^2
}
error = 0.5 * error
return( error )
}
# random initialize the weights
weights <- c( 0.2 , 3.9)
myError <- leastSquaresError( inputs, weights, targets)
print( myError )
source('~/playground/proj-ML-Gallery/src/R/synthetic-data.R')
# =============================================================================
# Clear workspace
rm(list=ls())
set.seed(123)
# =============================================================================
setwd('/Users/aaron/playground/proj-ML-gallery/data/')
# =============================================================================
# libraries
library(ggplot2)
# =============================================================================
# sample from uniform distribution
# x ~ U(0,1)
nSamples <- 10
inputs <- runif( nSamples )
# =============================================================================
# Targets
# t = sin(2*pi*x) + noise
#targets <- sin( 2 * pi * inputs) + rnorm( nSamples, 0, 0.30 )
# t = w0 + w1*x
w0 = 2.71
w1 = 0.43
targets <- w0 + w1 * inputs + rnorm( nSamples, 0, 0.02 )
# =============================================================================
# plot dataset
qplot( inputs, targets )
# =============================================================================
# linear regression in R
linReg <- lm(targets ~ inputs)
# =============================================================================
# learn these parameters manually
# 1. specify parametric functional form of the model
# 2. determine the values of the parameters using max lnL/error function
# =============================================================================
# 1. y(x,w) = w0 + w1*x
# 2. E(w) = 0.5 * sum_i (y_i - t_i)^2
leastSquaresError <- function( x , w, t){
error = 0.0;
for( i in 1:nSamples ){
y <- w[1] + w[2]*x[i]
error = error + ( y - t[i])^2
}
error = 0.5 * error
return( error )
}
# random initialize the weights
weights <- c( 0.2 , 3.9)
myError <- leastSquaresError( inputs, weights, targets)
print( myError )
# =============================================================================
# learn best parameters
linReg
inputs
